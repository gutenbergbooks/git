#!/bin/bash
usage(){
	fmt <<EOF
DESCRIPTION
	Initialize a new Project Gutenberg ebook repository for the given ebook IDs, and create corresponding repositories on GitHub.

	Given an ebook ID, this script will work on the corresponding directory in the Project Gutenberg ebook directory structure.  See /data/htdocs/gutenberg/README for an explanation of the directory layout.

	This script must be run by a Unix user in the 'committers' group, who has chmod and chgrp permissions on the target directories.

	A GitHub account is not required to run this script.

USAGE
	init-pg-repo EBOOKID [EBOOKID...]
EOF
	exit
}
die(){ printf "Error: ${1}\n" 1>&2; exit 1; }
require(){ command -v $1 > /dev/null 2>&1 || { suggestion=""; if [ ! -z "$2" ]; then suggestion=" $2"; fi; die "$1 is not installed.${suggestion}"; } }
if [ $# -eq 1 ]; then if [ "$1" = "--help" -o "$1" = "-h" ]; then usage; fi fi
#End boilerplate

#Check for dependencies
require "xpath" "Try: apt-get install libxml-xpath-perl"

ebookIds=""
gutenbergRepoRoot="/data/htdocs/gutenberg/" #Include trailing slash!
githubUser="gutenbergbooks-github-bot"
githubToken=$(cat "/data/git/secrets/gutenbergbooks-github-bot-authentication-token") #Personal access token for the GitHub gutenbergbooks-github-bot user

groups | grep --quiet "committers"
if [ $? -ne 0 ]; then
	die "You must be in the \"committers\" Unix group to run this script"
fi

while [ $# -gt 0 ]
do
	case "$1" in
		*)
			ebookIds=$(printf "%s\n%s" "${ebookIds}" "$1")
		;;
	esac
	shift
done

printf "%s\n" "${ebookIds}" | while IFS= read -r ebookId;
do
	if [ "${ebookId}" = "" ]; then
		continue
	fi

	if ! [[ "${ebookId}" =~ ^[0-9]+$ ]]; then
		die "Ebook ID is not a number: ${ebookId}"
	fi

	#Generate a path to the target ebook's home directory
	targetDir=$(/data/git/pgpath.pl "${ebookId}")
	targetDir="${gutenbergRepoRoot}${targetDir}${ebookId}"

	if [ ! -d "${targetDir}" ]; then
		die "Couldn't locate directory for ebook #${ebookId} in ${targetDir}"
	fi

	cd "${targetDir}"

	if [ -d ".git" ]; then
		die "Already a Git repo: ${targetDir}"
	fi

	echo "Processing ebook #${ebookId}"

	#Try to find the ebook name and author
	ebookName=$(grep --extended-regexp --only-matching "<dcterms:title>[^<]+?<\/dcterms:title>" "/data/crowd/cache/epub/${ebookId}/pg${ebookId}.rdf" | sed -E "s/<[^>]+?>//g")

	if [ "${ebookName}" = "" ]; then
		die "Couldn't get ebook name"
	fi

	ebookAuthor=$(grep --extended-regexp --only-matching "<pgterms:alias>[^<]+?<\/pgterms:alias>" "/data/crowd/cache/epub/${ebookId}/pg${ebookId}.rdf" | head -n 1 | sed -E "s/<[^>]+?>//g")

	if [ "${ebookAuthor}" = "" ]; then
		ebookAuthor=$(xpath -e "string(//dcterms:creator//pgterms:name)" "/data/crowd/cache/epub/${ebookId}/pg${ebookId}.rdf" 2> /dev/null)
	fi

	if [ "${ebookAuthor}" = "" ]; then
		die "Couldn't get ebook author"
	fi

	#Create a .gitignore file
	cat <<- EOF > "${targetDir}/.gitignore"
	old
	*.zip
	EOF

	#Set the correct group for this repo
	sudo chown --recursive gutenbergbooks-github-bot:committers "${targetDir}/"

	#Set the sticky bit so new files get created with the `committers` group
	sudo chmod --recursive ug+ws "${targetDir}/"

	#Initialize the Git repo
	#We have to pass the --shared option so that group filesystem permissions are respected
	git init --shared --quiet

	#Allow remote repositories to push to this one, even though we aren't a bare repo
	git config receive.denyCurrentBranch updateInstead

	git add --all

	git commit --quiet --message "Initial commit"

	if [ $? -ne 0 ]; then
		die "Couldn't perform Git initial commit"
	fi

	#Remove unused hooks
	rm -f "${targetDir}"/.git/hooks/*.sample

	#Set up some Git hooks to automate GitHub integration
	#When we commit to this repo, push to GitHub automatically
	#(Local user makes a local commit -> push commit to GitHub)
	ln -s /data/git/git-hooks/post-commit "${targetDir}/.git/hooks/post-commit"
	chmod +x "${targetDir}/.git/hooks/post-commit"

	#Do the same on post-receive
	#(Remote non-GitHub user does git push into our local repo -> push changes to GitHub)
	ln -s /data/git/git-hooks/post-commit "${targetDir}/.git/hooks/post-receive"
	chmod +x "${targetDir}/.git/hooks/post-receive"

	#When we pull from remote, make sure Git didn't mess up our permissions
	ln -s /data/git/git-hooks/post-merge "${targetDir}/.git/hooks/post-merge"
	chmod +x "${targetDir}/.git/hooks/post-merge"

	#And when we switch branches too
	ln -s /data/git/git-hooks/post-merge "${targetDir}/.git/hooks/post-checkout"
	chmod +x "${targetDir}/.git/hooks/post-checkout"

	#Set new files Git created
	sudo chown --recursive gutenbergbooks-github-bot:committers "${targetDir}/.git/"

	#Set the sticky bit so new files get created with the `committers` group
	sudo chmod --recursive ug+ws "${targetDir}/.git/"

	#Create a GitHub repo
	output=$(curl --silent --include --user "${githubUser}:${githubToken}" https://api.github.com/orgs/gutenbergbooks/repos --data "{\"name\":\"${ebookId}\", \"homepage\":\"https://www.gutenberg.org/ebooks/${ebookId}\", \"has_downloads\":false, \"has_wiki\":false, \"description\":\"Source for the Project Gutenberg edition of ${ebookName}, by ${ebookAuthor}\"}")

	echo "${output}" | grep --quiet --ignore-case "201 Created"
	if [ $? -eq 0 ]; then
		git remote add github "git@github.com:gutenbergbooks/${ebookId}.git"

		#Set git to automatically push to Github
		git config branch.master.remote github
		git config branch.master.merge refs/heads/master

		sudo -u gutenbergbooks-github-bot git push --quiet github
	else
		echo "Couldn't create GitHub repo ${ebookId}:" 1>&2
		die "${output}"
	fi
done
